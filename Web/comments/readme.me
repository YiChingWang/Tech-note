
# 💬 Add Comment（留言系統）功能開發練習紀錄

我使用原生 HTML、JavaScript、Express 後端實作了一個留言系統，透過這個練習模擬了**留言新增（POST）與留言顯示（GET）**的完整流程，並深入了解了前後端資料互動的基礎。

---

## 🔧 使用技術

- HTML / CSS（基礎頁面與表單設計）
- JavaScript（DOM 操作與事件綁定）
- Fetch API（AJAX 非同步請求）
- Node.js + Express（後端伺服器與 RESTful API）
- HTTP 方法：GET / POST
- 網頁導向流程控制（Redirect）

---

## 🚀 專案功能

1. **首頁**（/）：顯示簡單導引與「Comments」連結
2. **/comments**：顯示所有留言（comments 陣列內容）
3. **/new-comments**：提供一個留言表單，允許使用者提交新留言
   - 可切換兩種表單送出方式（原生與 fetch）

---

## 🧠 開發重點與學習收穫

### 🔹 檔案結構設計

- 每個 HTML 頁面都對應一支獨立 JavaScript 檔案，**負責自己頁面的邏輯與資料處理**
- 這樣的模組化寫法讓維護與除錯更清楚

### 🔹 Form 提交的兩種方式比較

| 方法 | 行為說明 | 優點 | 缺點 |
|------|----------|------|------|
| ✅ 原生 `<form>` + `res.redirect()` | 後端接收後用 `res.redirect()` 導向 `/comments` | 結構簡單、瀏覽器行為預設支援、穩定性高 | 不易做細節控制，例如顯示 loading 狀態、阻止重送要靠 PRG 模式 |
| ✅ `fetch()` + `res.json()` | 前端攔截後送 AJAX，手動跳轉或更新畫面 | 可以完全控制流程、即時顯示結果、不用重新載入整頁 | 程式碼稍複雜，需額外處理錯誤與轉頁邏輯 |

### 🔹 PRG 模式（Post/Redirect/Get）

- 原生表單若送出後**直接回傳 HTML**，使用者重新整理頁面會觸發「表單重送」的警告，導致重複送出資料
- 正確作法是：
  1. 使用者送出表單 → 後端處理完資料
  2. **redirect（302）** 回 GET 頁面
  3. 使用者看到 GET 的結果頁，即使重新整理也不會重送資料
- 這就是所謂的 **Post / Redirect / Get 模式**

### 🔹 前後端職責分離（Separation of Concerns）

- 表單畫面 → HTML + JavaScript 負責
- 資料存取與驗證 → Express 後端處理
- 明確區分「畫面邏輯」與「資料邏輯」

---

## 📦 我額外學到的知識點

- HTTP 狀態碼的應用（201, 400 等）
- fetch 的 `.then(res => res.json())` 需要後端配合 `res.json()` 回傳 JSON
- 頁面跳轉可以由伺服器控制（res.redirect）也可以由前端控制（`window.location.href`）
- 網頁的互動性可以根據需求選擇「傳統導向流程」或「SPA 式的局部更新」

---

## ✅ 心得與反思

過去我只會單純使用 `res.redirect()` 來處理表單送出後的導向，這次實作讓我**第一次真正理解「為什麼要用 redirect」**，也體會到「不使用 redirect 會造成表單重送」的實際後果。

此外，我也學到如何區分「伺服器主導的畫面流程」與「前端控制邏輯」之間的差別，並能根據實際需求去選擇不同做法，這讓我對 Web Application 的整體架構理解更完整。

這次的練習不只是讓我學會怎麼「做留言功能」，而是讓我從一個具體功能中，深入理解了**資料流程設計、用戶體驗、安全性、防錯處理與開發者分工**等核心概念。

